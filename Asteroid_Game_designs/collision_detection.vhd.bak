-- Bouncing Ball Video 
LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.all;
USE  IEEE.STD_LOGIC_ARITH.all;
USE  IEEE.STD_LOGIC_UNSIGNED.all;

ENTITY asteriod IS
   PORT(	ship_pos_X										: IN std_logic_vector(9 DOWNTO 0);
			ship_pos_Y										: IN 
	);
END asteriod;

architecture behavior of asteriod is  -- Video Display Signals
SIGNAL Ball_on, Direction								: std_logic; 
SIGNAL Ball_Y_motion, Ball_X_motion 				: std_logic_vector(9 DOWNTO 0);
SIGNAL Ball_Y_pos, Ball_X_pos							: std_logic_vector(9 DOWNTO 0);
SIGNAL init_Y_pos											: std_logic_vector(9 DOWNTO 0);
SIGNAL buffer_size										: std_logic_vector(9 DOWNTO 0);

BEGIN  
-- Colors for pixel data on video signal
buffer_size <= Size(8 downto 0) & '0'; --multiply size by 2 to get buffer size
init_Y_pos <= Size; 							--start asteriod in middle of buffer

--assign outputs
X_pos <= Ball_X_pos;
Y_pos <= Ball_Y_pos;
Size_out <= Size;

Red <=  en and color(2) and Ball_on;	--turn on red when ball is enabled, red is enabled, and the ball should be on
Green <= en and color(1) and Ball_on;	--turn on green when ball is enabled, green is enabled, and the ball should be on
Blue <=  en and color(0) and Ball_on; 	--turn on blue when ball is enabled, blue is enabled, and the ball should be on

RGB_Display: Process (Ball_X_pos, Ball_Y_pos, pixel_column, pixel_row, Size)
BEGIN
 -- Set Ball_on ='1' to display ball
 IF ('0' & Ball_X_pos <= pixel_column + Size + buffer_size) AND
 	 (Ball_X_pos + Size >= '0' & pixel_column + buffer_size) AND
 	 ('0' & Ball_Y_pos <= pixel_row + Size + buffer_size) AND
 	 (Ball_Y_pos + Size >= '0' & pixel_row + buffer_size) THEN
 		Ball_on <= '1';
 	ELSE
 		Ball_on <= '0';
END IF;
END process RGB_Display;

Move_Ball: process (vert_sync)
BEGIN 
	IF (reset = '0') THEN
		Ball_Y_pos <= Init_Y_pos;
		Ball_X_pos <= Init_X_pos;
		Ball_Y_motion <= init_Y_vel;
		Ball_X_motion <= init_X_vel;
		off_edge <= '1';
	-- Move ball once every vertical sync
	ELSIF (vert_sync'event) and (vert_sync = '1') THEN
			IF ('0' & Ball_Y_pos) >= 480 + Size + buffer_size THEN
				off_edge <= '0';
			END IF;
			--restart after going past edge
			IF ('0' & Ball_X_pos) >= 640 + Size + buffer_size THEN
				off_edge <= '0';
			ELSIF Ball_X_pos <= Size THEN
				off_edge <= '0';
			END IF;
			
			-- Compute next ball Y position
			Ball_Y_pos <= Ball_Y_pos + Ball_Y_motion;
			--	Compute next ball X position
			Ball_X_pos <= Ball_X_pos + Ball_X_motion;
	END IF;
END process Move_Ball;
END behavior;

