			-- Bouncing Ball Video 
LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.all;
USE  IEEE.STD_LOGIC_ARITH.all;
USE  IEEE.STD_LOGIC_UNSIGNED.all;
			-- Bouncing Ball Video 


ENTITY ship IS

   PORT(pixel_row, pixel_column	: IN std_logic_vector(9 DOWNTO 0);
		  u,l,r,d						: IN std_logic; 
        Vert_sync						: IN std_logic;
		  en								: IN std_logic;
		  hit								: IN std_logic;
		  reset							: IN std_logic;
		  Red,Green,Blue 				: OUT std_logic);
	
END ship;

architecture behavior of ship is

			-- Video Display Signals   
SIGNAL Ball_on, Direction					: std_logic;
SIGNAL Size 									: std_logic_vector(9 DOWNTO 0);  
SIGNAL Ball_Y_motion, Ball_X_motion 	: std_logic_vector(9 DOWNTO 0);
SIGNAL Ball_Y_pos 							: std_logic_vector(9 DOWNTO 0) := CONV_STD_LOGIC_VECTOR(240,10);
SIGNAL Ball_X_pos								: std_logic_vector(9 DOWNTO 0) := CONV_STD_LOGIC_VECTOR(320,10);
SIGNAL red_en 									: std_logic;
SIGNAL green_en 								: std_logic;
SIGNAL blue_en  								: std_logic;

BEGIN           

Size <= CONV_STD_LOGIC_VECTOR(8,10);
-- White Ship
Red <=  en and red_en and Ball_on;				--turn on red when ball is enabled, red is enabled, and the ball should be on
Green <= en and green_en and Ball_on;			--turn on green when ball is enabled, red is enabled, and the ball should be on
Blue <=  en and blue_en and Ball_on;			--turn on blue when ball is enabled, red is enabled, and the ball should be on

RGB_Display: Process (reset, Ball_X_pos, Ball_Y_pos, pixel_column, pixel_row, Size)
BEGIN
 IF (reset = '0') THEN
	red_en <= '1';
	green_en <= '1';
	blue_en <= '1';
 END IF;
 -- Set Ball_on ='1' to display ball
 IF ('0' & Ball_X_pos <= pixel_column + Size) AND
 	 -- compare positive numbers only
 	(Ball_X_pos + Size >= '0' & pixel_column) AND
 	('0' & Ball_Y_pos <= pixel_row + Size) AND
 	(Ball_Y_pos + Size >= '0' & pixel_row ) THEN
		Ball_on <= '1';
		IF (hit = '1') THEN
			green_en <= '0';
			blue_en <= '0';
		END IF;
 	ELSE
 		Ball_on <= '0';
END IF;
END process RGB_Display;


Move_Ball: process
BEGIN
	-- Move ball once every vertical sync
	WAIT UNTIL vert_sync'event and vert_sync = '1';
		-- Compute next ball Y position
		IF (u = '1') and (Ball_Y_pos > Size) THEN 
			Ball_Y_pos <= Ball_Y_pos + CONV_STD_LOGIC_VECTOR(-2,10);
		END IF;
		IF (d = '1') and (('0' & Ball_Y_pos) < 480 - Size) THEN
			Ball_Y_pos <= Ball_Y_pos + CONV_STD_LOGIC_VECTOR(2,10);
		END IF;
		IF (r='1') and (('0' & Ball_X_pos) < 640 - Size) THEN 
			Ball_X_pos <= Ball_X_pos + CONV_STD_LOGIC_VECTOR(2,10);
		END IF;
		IF (l='1') and (Ball_X_pos > Size) THEN
			Ball_X_pos <= Ball_X_pos + CONV_STD_LOGIC_VECTOR(-2,10);
		END IF;
END process Move_Ball;

END behavior;

